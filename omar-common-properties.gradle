import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

buildscript {
    ext {
        artifactoryContextUrl="https://artifacts.radiantbluecloud.com/artifactory"
        ossimMavenProxy="${artifactoryContextUrl}/ossim-deps"
    }
    repositories {

     mavenLocal()
     maven { url "${ossimMavenProxy}" }
      jcenter()
      maven {
        url "https://plugins.gradle.org/m2/"
      }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
        classpath 'com.github.skhatri:gradle-s3-plugin:1.0.4'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
   }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: com.github.skhatri.s3aws.plugin.S3Plugin
apply plugin: org.jfrog.gradle.plugin.artifactory.ArtifactoryPlugin

def getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}
def gitBranch=getCurrentGitBranch()

ext {
  buildVersionTag=gitBranch=="dev"?"SNAPSHOT":"RELEASE"//"SNAPSHOT" // SNAPSHOT or RELEASE
  jarArtifactsChanging="${buildVersionTag}" == "SNAPSHOT" ? true:false
  artifactoryUser="${System.env.ARTIFACTORY_USER}"
  artifactoryPassword="${System.env.ARTIFACTORY_PASSWORD}"

  openShiftUrl="https://openshift-master.ossim.io:8443"
  yumTag=(buildVersionTag=="SNAPSHOT"?"dev":"master")
  dockerAppTag=(buildVersionTag=="SNAPSHOT"?"latest":"release")
  ports=project.ext.has("ports")?project.ext.ports:"8080"
  dockerRegistryUrl="docker-registry-default.ossim.io"
  registryProjectName="o2"
  runAsRoot=project.ext.has('runAsRoot')?project.ext.runAsRoot:false
  openShiftUserName="${System.env.OPENSHIFT_USERNAME}"
  openShiftPassword="${System.env.OPENSHIFT_PASSWORD}"

  dockerNamespaceUrl = "${dockerRegistryUrl}/${registryProjectName}/"

  image = "${project.name}:${dockerAppTag}"
  imageTgz = "${project.name}.tgz"

  installOssim = true
}

version "${buildVersion}-${buildVersionTag}"

task logIn () {
  doLast {
    def login = false
    def count = 0
    def numRetries = 3
    def sleepMillis = 1000
    while(!login && count < numRetries){
      try{
        exec {
          commandLine 'oc', 'login', '--insecure-skip-tls-verify', openShiftUrl,
           '-u', openShiftUserName,
           '-p', openShiftPassword
        }
        login = true
      }
      catch(e){

        println 'Openshift login failed!'
        count++
        if(count < numRetries){
          Thread.sleep(sleepMillis)
        }
        else {
          throw(e)
        }
      }
    }

    def loginTokenStream = new ByteArrayOutputStream()
    exec {
      commandLine 'oc', 'whoami', '-t'
      standardOutput loginTokenStream
    }

    def loginToken = new String(loginTokenStream.toByteArray(), 'UTF-8')?.trim()
    println loginToken
    exec {
     commandLine 'docker', 'login', '-p', loginToken, '-u', 'unused', dockerRegistryUrl
    }
  }
}


task downloadBaseImage(type:com.github.skhatri.s3aws.plugin.S3DownloadTask, dependsOn: 'assemble') {
  bucket = 'o2-delivery/dev/docker'
  key = "${project.ext.baseImage}.tgz"
  saveTo = file("build/libs/${project.ext.baseImage}.tgz")
}

task loadBaseDockerImage(dependsOn: downloadBaseImage) {

  doLast {
    exec {
      commandLine 'docker', 'load', '-i', "build/libs/${project.ext.baseImage}.tgz"
    }
  }
}

//task createDockerfile(type: Dockerfile, dependsOn: loadBaseDockerImage){
task createDockerfile(type: Dockerfile){
  def jarName = "${project.name}-${buildVersion}-${buildVersionTag}.jar"

  destFile = project.file('build/libs/Dockerfile')
  from "${project.dockerNamespaceUrl}${project.ext.baseImage}:${project.dockerAppTag}"
//  from "${project.ext.baseImage}:${dockerAppTag}"
  maintainer "DigitalGlobe-RadiantBlue"
  environmentVariable "SPRING_CLOUD_CONFIG_ENABLED","true"
  environmentVariable "SPRING_CLOUD_DISCOVERY_ENABLED","true"
  instruction "expose ${ports}"
  if(!runAsRoot)
  {
    runCommand 'useradd omar'
    copyFile jarName, "/home/omar"
    user 'omar'
    workingDir '/home/omar'  
  }
  else
  {
    copyFile jarName, "/root/"
    workingDir '/root'  
  }
    defaultCommand 'java', '-server', '-Xms256m', '-Xmx1024m', '-Djava.awt.headless=true', '-XX:+CMSClassUnloadingEnabled', '-XX:+UseGCOverheadLimit', '-Djava.security.egd=file:/dev/./urandom', '-jar', jarName
}

task buildDockerImage(type: DockerBuildImage) {
  dependsOn createDockerfile
  dependsOn logIn 
  inputDir = createDockerfile.destFile.parentFile
  tag = "${image}"
}

task tagDockerImage(type: DockerTagImage, dependsOn: buildDockerImage){
  imageId "${image}"
  tag "${dockerAppTag}"
  repository  "${dockerNamespaceUrl}${project.name}"
}


task pushDockerImage(type: DockerPushImage){

  dependsOn tagDockerImage
  
  imageName "${dockerNamespaceUrl}${image}"
}

task saveDockerImage(dependsOn: pushDockerImage) {
  doLast {
    exec {
      commandLine 'docker', 'save', image, '-o', "build/libs/${project.name}.tgz"
    }
  }
}

// Uses the S3 plugin to push the .tgz file to the ossimlabs
task dockerImageToS3(type: com.github.skhatri.s3aws.plugin.S3UploadTask, dependsOn: saveDockerImage) {
  bucket = 'o2-delivery/dev/docker'
  key = "${imageTgz}"
  file = project.file("build/libs/${imageTgz}").toString()
}

task dockerFileToS3(type: com.github.skhatri.s3aws.plugin.S3UploadTask, dependsOn: createDockerfile) {
  bucket = 'o2-delivery/dev/docker'
  key = "${project.name}-Dockerfile"
  file = createDockerfile.destFile.toString()
}

task doAll() {
  dependsOn dockerImageToS3
  dependsOn dockerFileToS3

  doLast{
    exec {
      // Removes the image that is pushed to the remote repository
      // from the local Docker registry
      commandLine 'docker', 'rmi', "-f", "${dockerNamespaceUrl}${image}"
    }
    exec {
      // Removes the default image created during the build process from
      // from the local Docker registry
      commandLine 'docker', 'rmi', "-f", image
    }
//    exec {
//      // Removes the 'o2-base' image used during the build process
//      commandLine 'docker', 'rmi', "-f", project.ext.baseImage
//    }
//    exec {
//      // Removes the zipped image that was pushed to S3
//      commandLine 'rm', "build/libs/${imageTgz}"
//    }
//    exec {
//      // Removes the base image zip file
//      commandLine 'rm', "build/libs/${project.ext.baseImage}.tgz"
//    }
  }
}

artifactory {
  contextUrl = "${artifactoryContextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    repository {
      repoKey = "omar-local"
      username = "${artifactoryUser}"
      password = "${artifactoryPassword}"
      maven = true
    }
    defaults{
      publications("mavenJava")
    }
  }
  resolve {
    repository {
      repoKey = "omar-local"
      username = "${artifactoryUser}"
      password = "${artifactoryPassword}"
      maven = true
    }
  }
}
artifactoryPublish.dependsOn.add("assemble")
