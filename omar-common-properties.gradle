import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import org.gradle.api.tasks.Copy

buildscript {
    ext {
        springBootV = "1.5.10.RELEASE"
        springCloudDependencyV = "Dalston.SR5"
        nexusContextUrl = "${System.env.REPOSITORY_MANAGER_URL}"
        ossimMavenProxy = "${nexusContextUrl}/ossim-deps"
        omarMavenProxy = "${nexusContextUrl}/omar-local"
        benManesV = "0.17.0"
        assetPipelineGradleV = "2.14.10"
        assetPipelineGrailsV = "2.14.10"
        springBootAdminStarterClientV = "1.5.7"
        bootstrapSelectV = "2.0.0-beta1"
        slickCarouselV = "1.8.1"
        angularSlickCarouselV = "3.1.7"
        selectizeV = "0.12.4"
        seiyriaBootstrapSliderV = "9.7.2"
        babelAssetPipelineV = "2.1.1"
        hibernateCoreV = "5.1.9.Final"
        elImplV = "2.2.1-b05"
        seleniumHtmlUnitDriverV = "2.52.0"
        htmlUnitV = "2.29"
        javaSdkDynamodbV = "1.11.279"
        springDataDynamodbV = "4.5.0"
        gradleDockerPluginV = "3.2.4"
        jodaTimeV = "2.9.9"
        webjarsSwaggerUIV = "3.10.0"
        postgressqlV = "42.2.1"
        hibernateSpatialV = "5.3.0.CR1"
        hibernate5V = "6.1.8"
        httpBuilderNgCoreV = "1.0.3"
        quartzV = "2.0.13"
        httpBuilderV = "0.7.2"
        awsJavaSDKV = "1.11.281"
        commonsIoV = "2.6"
        springSecurityCoreV = "3.3.0.M1"
        npmCesiumV = "1.38.0"
        hibernateEhcacheV = "5.3.0.CR1"
        omarCommonProperties = new File(System.env.OMAR_COMMON_PROPERTIES ?: "").parentFile.toString()
    }
    repositories {
        mavenLocal()
        maven { url "${ossimMavenProxy}" }
        maven { url "${omarMavenProxy}" }
        if (!System.env.WWW_CONNECTED || Boolean.parseBoolean(System.env.WWW_CONNECTED)) {
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.12'
        classpath 'com.github.skhatri:gradle-s3-plugin:1.0.4'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.6.2"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: "maven"

repositories {
    // maven { url "${ossimMavenProxy}" }
}

def lazyProperty(final String propertyName) {
    def result = null
    def propertyValue

    if (project.ext.has(propertyName)) {
        propertyValue = project.ext."${propertyName}"
    } else if (project.hasProperty(propertyName)) {
        propertyValue = project."${propertyName}"
    }

    if (propertyValue) {
        // Check for type of property to see if we can
        // run it as a Closure.
        if (propertyValue instanceof Closure) {
            // Invoke Closure to calculate the value.
            result = propertyValue()
        } else {
            // Return value as-is.
            result = propertyValue
        }

    }

    return result
}


String getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    try {
        println "${project.projectDir}"
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
        e.printStackTrace()
    }
    return gitBranch
}

def gitBranch = getCurrentGitBranch()

ext {
    //used in the copyRpmToS3 task in omar-services app build.gradle
    workingBranch = gitBranch

    buildVersionTag = gitBranch == "master" ? "RELEASE" : "SNAPSHOT"
    openShiftUrl = "${System.env.OPENSHIFT_URL}"
    yumTag = (buildVersionTag == "SNAPSHOT" ? "dev" : "master")
    dockerAppTag = "${System.env.DOCKER_TAG}"
    dockerRegistryUrl = "${System.env.DOCKER_REGISTRY_URL}"
    registryProjectName = "${System.env.REGISTRY_PROJECT_NAME}"
    openShiftUserName = "${System.env.OPENSHIFT_USERNAME}"
    openShiftPassword = "${System.env.OPENSHIFT_PASSWORD}"
    dockerNamespaceUrl = "${dockerRegistryUrl}/${registryProjectName}/"

    image = "${project.name}:${dockerAppTag}"
    imageTgz = "${project.name}.tgz"

    installOssim = true
}

Boolean fullAssemble = lazyProperty('fullAssemble')
if (fullAssemble == null) {
    String projName = "${project.name}"
    fullAssemble = true;
    if (projName.contains("-plugin")) {
        fullAssemble = false
    }
}

def dockerFile = lazyProperty('dockerFile')
if (!dockerFile) {
    dockerFile = project.file('build/libs/Dockerfile')
} else {
    dockerFile = project.file(dockerFile)
}

Boolean hasJar = lazyProperty('hasJar')
if (hasJar == null) {
    hasJar = true
}

version "${buildVersion}-${buildVersionTag}"

task logIn() {
    doLast {
        def login = false
        def count = 0
        def numRetries = 3
        def sleepMillis = 1000
        while (!login && count < numRetries) {
            try {
                exec {
                    commandLine 'oc', 'login', '--insecure-skip-tls-verify', openShiftUrl,
                            '-u', openShiftUserName,
                            '-p', openShiftPassword
                }
                login = true
            }
            catch (e) {

                println 'Openshift login failed!'
                count++
                if (count < numRetries) {
                    Thread.sleep(sleepMillis)
                } else {
                    throw (e)
                }
            }
        }

        def loginTokenStream = new ByteArrayOutputStream()
        exec {
            commandLine 'oc', 'whoami', '-t'
            standardOutput loginTokenStream
        }

        def loginToken = new String(loginTokenStream.toByteArray(), 'UTF-8')?.trim()
        println loginToken
        exec {
            commandLine 'docker', 'login', '-p', loginToken, '-u', 'unused', dockerRegistryUrl
        }
    }
}


task downloadBaseImage(type: com.github.skhatri.s3aws.plugin.S3DownloadTask) {
    bucket = "o2-delivery/${gitBranch}/docker"
    key = "${lazyProperty('baseImage')}.tgz"
    saveTo = file("${dockerFile.parentFile}/${lazyProperty('baseImage')}.tgz")
}

task loadBaseDockerImage(dependsOn: downloadBaseImage) {
    doLast {
        exec {
            commandLine 'docker', 'load', '-i', "${dockerFile.parentFile}/${lazyProperty('baseImage')}.tgz"
        }
    }
}

task copyJarToDockerDir(type: Copy) {
    from "${buildDir}/libs/${project.name}-${buildVersion}-${buildVersionTag}.jar"
    into "${projectDir}/docker"
}

task createDockerfile(type: Dockerfile) {
    def statementOverride = lazyProperty("dockerStatementsOverride");
    def jarName = "${project.name}-${buildVersion}-${buildVersionTag}.jar"
    destFile = dockerFile
    if (statementOverride) {
        statementOverride.each {
            instruction it
        }
    } else {
        instruction "FROM ${lazyProperty('dockerNamespaceUrl')}${lazyProperty('baseImage')}:${lazyProperty('dockerAppTag')}"
        instruction """ENV SPRING_CLOUD_CONFIG_ENABLED=true \\
                       SPRING_CLOUD_DISCOVERY_ENABLED=true \\
                       HOME=/home/omar"""
        instruction "EXPOSE 8080"
        instruction "COPY ${jarName} \$HOME"
        instruction 'WORKDIR \$HOME'
        instruction "CMD \$HOME/run.sh"
    }
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    dependsOn logIn
    inputDir = createDockerfile.destFile.parentFile
    tag = "${image}"
}

task tagDockerImage(type: DockerTagImage, dependsOn: buildDockerImage) {
    imageId "${image}"
    tag "${dockerAppTag}"
    repository "${dockerNamespaceUrl}${project.name}"
}

task pushDockerImage(/*type: DockerPushImage*/) {
    dependsOn tagDockerImage
    doLast {
        exec {
            commandLine 'docker', 'push', "${dockerNamespaceUrl}${image}"
        }
    }
}

task saveDockerImage(dependsOn: pushDockerImage) {
    doLast {
        exec {
            commandLine 'docker', 'save', image, "-o", "${dockerFile.parentFile}/${project.name}.tar"
        }
        exec {
            commandLine 'gzip', "-f", "-S", ".gz", "${dockerFile.parentFile}/${project.name}.tar"
        }
        exec {
            commandLine 'mv', "-f", "${dockerFile.parentFile}/${project.name}.tar.gz", "${dockerFile.parentFile}/${project.name}.tgz"
        }
    }
}

task dockerImageToS3(dependsOn: saveDockerImage) {
    doLast {
        exec {
            commandLine "aws", "s3", "cp", "${dockerFile.parentFile}/${imageTgz}", "s3://o2-delivery/${gitBranch}/docker/${imageTgz}"
        }
    }
}

task dockerFileToS3(dependsOn: createDockerfile) {
    doLast {
        exec {
            commandLine "aws", "s3", "cp", "${createDockerfile.destFile.toString()}", "s3://o2-delivery/${gitBranch}/docker/${project.name}-Dockerfile"
        }
    }
}

task doAll() {
    dependsOn dockerImageToS3
    dependsOn dockerFileToS3

    doLast {
        exec {
            // Removes the image that is pushed to the remote repository
            // from the local Docker registry
            commandLine 'docker', 'rmi', "-f", "${dockerNamespaceUrl}${image}"
        }
        exec {
            // Removes the default image created during the build process from
            // from the local Docker registry
            commandLine 'docker', 'rmi', "-f", image
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${System.env.REPOSITORY_MANAGER_URL}/omar-local-${buildVersionTag.toLowerCase()}") {
                authentication(userName: "${System.env.REPOSITORY_MANAGER_USER}", password: "${System.env.REPOSITORY_MANAGER_PASSWORD}")
            }
        }
    }
}



if (fullAssemble) {
    uploadArchives.dependsOn.add("assemble")
    copyJarToDockerDir.dependsOn("assemble")
}

if (hasJar) {
    if (lazyProperty('dockerFile')) {
        createDockerfile.dependsOn.add("copyJarToDockerDir")
    }
}